1)shutdown method of executor service initiates the shutdown of executor service and
will shutdown once the queued tasks as well as the task executed by thread is completed

2) isTerminated : will return true if the executor service has been shutdown
3) isShutdown : will return true if executor service has been initiated to shutdown

2)runAsync ---> Does not take argument and does not r

3)by default completeable will run on thread from forkjoin pool.

Drawbacks of future:
A) can't chain tasks: let's say we are running task A asynchronously and want to run task B
too asynchronously but b has to depend on A's response , so if we want to implement using Future
then we have wait in main thread for task A to complete and then pass the response to B. But in
Completeable u can chain the task using thenApply,thenAccept and thenRun and task A's response can
directly go to task B without the main thread to wait.

B) Can't combine: Running multiple task asynchronously and have to ensure all the task has
completed processing. With future we can't do it, but with Completeable we can do it

C) Can't manually stop.

D) No exception handling.

4)join() of CompleteableFuture will wait for the completeable future to complete
and return the result of the completeabale future and can throw unchecked exception if exception
occurs

5) thenApply --> takes argument and return response;
    thenAccept --> takes argument and return nothing.
    thenRun --> does not take argument and return nothing.



thenCompose chains two future A and B where future B is dependent on the result of future A.

thenCombine will chain two futures in a way where two futures will run independently of each other and once
both are done executed we can do something with the result of both the methods.

allOf will wait for all futures who are running parallely to get completed
anyOf will wait for any one of future to be completed