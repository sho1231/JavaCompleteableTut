1) After the newly created thread has done it's task, java will kill that thread.

2) 1 java thread= 1 os thread

3) In executorservice framework, a blocking queue (thread safe) is used since thread attempt to fetch tasks from the queue concurrently,
that is fetching task at the same time which might cause same task being completed by more than one thread which
leads to waste of resource.

4) N cores = N number of threads running concurrently. Also this will be the ideal number to have that many threads.

5) For IO intensive operations like an http call or database call, it's better to have more threads.


6) In cachedthreadpool, there is synchronous queue and only one place to hold new task
7) If all threads are busy , then new thread is used else thread which has completed the task will be used
for another task
8) If threads are idle for 60 seconds, it will be killed

9)Single threaded executor --> has only one thread and is used when we need certain tasks to be performed sequentially


10) Core pool size: Initial thread pool size
    Current pool size: If threads are added or deleted accordingly to the pool size, at that time the pool size is called
    current pool size.
    max pool size: Max no of thread a pool can have.

11) Unbounded queue are queues that has no size


12) CallerRunsPolicy: If queue can't hold new task then thread pool will ask caller itself i.e: Main thread itself to run the task.
